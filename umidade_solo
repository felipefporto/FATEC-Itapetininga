#include <ESP8266WiFi.h> 
#include <PubSubClient.h>

int pino_a = 0; /* Pino ligado ao A0 do sensor*/ 
int val_a;  /* Armazena o valor lido do pino analógico */
float UmidadePercentual;

//WiFi
const char* SSID = "Casa"; // SSID / nome da rede WiFi que deseja se conectar
const char* PASSWORD = "Cas@4321"; // Senha da rede WiFi que deseja se conectar
WiFiClient wifiClient;

//MQTT Server
const char* BROKER_MQTT = "test.mosquitto.org"; // "mqtt.fatec" URL do broker MQTT que se deseja utilizar
int BROKER_PORT = 1883; // Porta do Broker MQTT

#define ID_MQTT "ESPUMID" // Informe um ID unico e seu. Caso sejam usados IDs repetidos a ultima conexão irá sobrepor a anterior.
#define TOPIC_PUBLISH "UM_SOLO" // Informe um Tópico único. Caso sejam usados tópicos em duplicidade, o último irá eliminar o anterior.
PubSubClient client(wifiClient); // Instancia o Cliente MQTT passando o objeto espClient

//Declaração das Funções
void mantemConexoes(); // Garante que as conexoes com WiFi e MQTT Broker se mantenham ativas
void conectaWiFi(); // Faz conexão com WiFi
void conectaMQTT(); // Faz conexão com Broker MQTT
void enviaPacote(); // Faz o Envio do Pacote

void setup() {

  pinMode(pino_a, INPUT);
  Serial.begin(115200); // MANTER

  conectaWiFi(); // MANTER
  client.setServer(BROKER_MQTT, BROKER_PORT);
}

void loop() {
  mantemConexoes();
  enviaValores();
  client.loop();
}

void mantemConexoes() {
  if (!client.connected()) {
    conectaMQTT();
  }

  conectaWiFi(); //se não há conexão com o WiFI, a conexão é refeita
}

void conectaWiFi() {

  if (WiFi.status() == WL_CONNECTED) {
    return;
  }

  Serial.print("Conectando-se na rede: ");
  Serial.print(SSID);
  Serial.println(" Aguarde!");

  WiFi.begin(SSID, PASSWORD); // Conecta na rede WI-FI
  while (WiFi.status() != WL_CONNECTED) {
    delay(2000);
    Serial.print(".");
  }

  Serial.println();
  Serial.print("Conectado com sucesso, na rede: ");
  Serial.print(SSID);
  Serial.print(" IP obtido: ");
  Serial.println(WiFi.localIP());
}

void conectaMQTT() {
  while (!client.connected()) {
    Serial.print("Conectando ao Broker MQTT: ");
    Serial.println(BROKER_MQTT);
    if (client.connect(ID_MQTT)) {
      Serial.println("Conectado ao Broker com sucesso!");
    }
    else {
      Serial.println("Noo foi possivel se conectar ao broker.");
      Serial.println("Nova tentatica de conexao em 10s");
      delay(10000);
    }
  }
}

void enviaValores()
{
    val_a = analogRead(pino_a);
    Serial.print("[Leitura ADC] ");
    Serial.println(val_a);

//Quanto maior o numero lido do ADC, menor a umidade.
//Sendo assim, calcula-se a porcentagem de umidade por:
//
// Valor lido Umidade percentual
// _ 0 _ 100
// | |
// | |
// – ValorADC – UmidadePercentual
// | |
// | |
// _|_ 978 _|_ 0
//
// (UmidadePercentual-0) / (100-0) = (ValorADC – 978) / (-978)
// Logo:
// UmidadePercentual = 100 * ((978-ValorADC) / 978)
    
    UmidadePercentual = 100 * ((978-(float)val_a) / 978);
    Serial.print("[Umidade Percentual] ");
    client.publish(TOPIC_PUBLISH,"UmidadePercentual");
    Serial.print(UmidadePercentual);
    Serial.println("%");
    delay(10000);

}
